<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	<context:property-placeholder location="classpath:database.properties"/>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<beans:bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<beans:property name="location" value="classpath:database.properties"/>
	</beans:bean>

	<beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="${db.driver}"/>
		<beans:property name="url" value="${db.url}"/>
		<beans:property name="username" value="${db.username}"/>
		<beans:property name="password" value="${db.password}"/>
		<beans:property name="connectionProperties" value="${db.ssl}"/>
	</beans:bean>
	
		<beans:bean id="sessionFactory"
				class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"/>
		<beans:property name="hibernateProperties">
			<beans:props>
				<beans:prop key="hibernate.dialect">${hibernate.dialect}</beans:prop>
				<beans:prop key="hibernate.show_sql">${hibernate.show_sql}</beans:prop>
				<beans:prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</beans:prop>
				<beans:prop key="javax.persistence.validation.mode">none</beans:prop>
			</beans:props>
		</beans:property>
		<beans:property name="annotatedClasses">
			<beans:list>
				<beans:value>ua.com.cib.exim.model.User</beans:value>
				<beans:value>ua.com.cib.exim.model.MailCopy</beans:value>
				<beans:value>ua.com.cib.exim.model.UserForward</beans:value>
				<beans:value>ua.com.cib.exim.model.EximAliase</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>

	<beans:bean id="userDetailsService"
		  class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
		<beans:property name="dataSource" ref="dataSource"/>
	</beans:bean>

	<beans:bean id="mailDao" class="ua.com.cib.exim.dao.MailDaoImpl"/>
	<beans:bean id="eximAliaseDao" class="ua.com.cib.exim.dao.EximAliasesDaoImpl"/>
	<beans:bean id="userDao" class="ua.com.cib.exim.dao.UsersDaoImpl"/>
	<beans:bean id="mailCopysDao" class="ua.com.cib.exim.dao.MailCopysDaoImpl"/>
	<beans:bean id="userForwardsDao" class="ua.com.cib.exim.dao.UserForwardsDaoImpl"/>
	<beans:bean id="userService" class="ua.com.cib.exim.services.UserServiceImpl"/>
	<beans:bean id="aliaseService" class="ua.com.cib.exim.services.AliaseServiceImpl"/>
	<beans:bean id="allBank" class="ua.com.cib.exim.model.EximAliase">
		<beans:constructor-arg value="allBank"/>
	</beans:bean>

	<tx:annotation-driven/>
	
	<beans:bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<beans:property name="dataSource" ref="dataSource"></beans:property>
		<beans:property name="sessionFactory" ref="sessionFactory"></beans:property>
	</beans:bean>

	<interceptors>
		<beans:bean id="webContentInterceptor"
			class="org.springframework.web.servlet.mvc.WebContentInterceptor">
			<beans:property name="cacheSeconds" value="0" />
			<beans:property name="useExpiresHeader" value="true" />
			<beans:property name="useCacheControlHeader" value="true" />
			<beans:property name="useCacheControlNoStore" value="true" />

		</beans:bean>
	</interceptors>

	<context:component-scan base-package="ua.com.cib.exim.controllers" />

	<beans:bean id="encoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<beans:constructor-arg value="12" />
	</beans:bean>


	<!--<beans:bean id="contextSource"-->
		  <!--class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">-->
		<!--<beans:constructor-arg value="ldap://10.10.11.5:389/dc=cib,dc=local"/>-->
		<!--<beans:property name="userDn" value="cn=manager,dc=cib,dc=local"/>-->
		<!--<beans:property name="password" value="password"/>-->
	<!--</beans:bean>-->

	<!--<beans:bean id="ldapAuthProvider"-->
		  <!--class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider">-->
		<!--<beans:constructor-arg>-->
			<!--<beans:bean class="org.springframework.security.ldap.authentication.BindAuthenticator">-->
				<!--<beans:constructor-arg ref="contextSource"/>-->
				<!--<beans:property name="userDnPatterns"><beans:list><beans:value>uid={0},ou=people</beans:value></beans:list></beans:property>-->
			<!--</beans:bean>-->
		<!--</beans:constructor-arg>-->
		<!--<beans:constructor-arg>-->
			<!--<beans:bean class="org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator">-->
				<!--<beans:constructor-arg ref="contextSource"/>-->
				<!--<beans:constructor-arg value="ou=groups"/>-->
				<!--<beans:property name="groupRoleAttribute" value="ou"/>-->
			<!--</beans:bean>-->
		<!--</beans:constructor-arg>-->
	<!--</beans:bean>-->

	<!--<bean id="ldapAuthProvider" class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider">-->
		<!--<constructor-arg>-->
			<!--&lt;!&ndash; the bind authenticator will first lookup the user using the service account credentials, then -->
				 <!--attempt to bind the user with their password once found &ndash;&gt;-->
			<!--<bean id="bindAuthenticator" class="org.springframework.security.ldap.authentication.BindAuthenticator">-->
				<!--<constructor-arg ref="contextSource" />-->
				<!--<property name="userSearch" ref="userSearch" />-->
			<!--</bean>-->
		<!--</constructor-arg>-->
		<!--<constructor-arg>-->
			<!--<bean class="org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator">-->
				<!--<constructor-arg ref="contextSource" />-->
				<!--<constructor-arg value="DC=company,DC=com" /> &lt;!&ndash; group search base &ndash;&gt;-->
				<!--&lt;!&ndash; <property name="defaultRole" value="ROLE_USER" /> -->
					<!--You can add a default role to everyone if needed &ndash;&gt;-->
				<!--<property name="searchSubtree" value="true" />-->
				<!--<property name="ignorePartialResultException" value="true" />-->
				<!--<property name="groupSearchFilter" value="(member={0})" />-->
			<!--</bean>-->
		<!--</constructor-arg>-->
	<!--</bean>-->
	<!--<bean id="userSearch" class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch">-->
		<!--<constructor-arg index="0" value="DC=company,DC=com" />-->
		<!--<constructor-arg index="1" value="(sAMAccountName={0})" />-->
		<!--<constructor-arg index="2" ref="contextSource" />-->
		<!--<property name="searchSubtree" value="true" />-->
	<!--</bean>-->
	<!--&lt;!&ndash;  end Web Security &ndash;&gt;-->


</beans:beans>
